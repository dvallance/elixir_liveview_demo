<section class="info js-instructions">
  <pre>
  <%= inspect(assigns, pretty: true) %>
  </pre>
  <h1 class="info__title">Elixir LiveView Demo</h1>
  <div class="info__engineer">
    <span class="info__by">by</span>
    <span class="info__name">David Vallance</span>
  </div>

  <div class="info__content">
    A quick exploration of using Elixir LiveView; along with Phoenix Presence and 
    PubSub to build something representative of a real world application.
  </div>
  <%= if function_exported?(Routes, :live_dashboard_path, 2) do %>
    <%= link "Dashboard", to: Routes.live_dashboard_path(@conn, :home), class: "button button--subdued" %>
  <% end %>
  
  <%= if GamesWeb.SessionHelper.current_user(@conn) do %>
    <%= link("Logout", to: "/authentication/login", method: :delete, class: "button") %>
  <% end %>


  The source code can be viewed on Github.

  My linked in profile www.linkedin.com/in/david-j-vallance
 
  Best viewed on a desktop I didn't add media queries and a mobile friendly layout (its just a tech demo).

  There are two LiveView components.
  - ChatLive for the global chat feature.
  - GameLive for game creation and rendering, which the specifics of a game are delegated to a LiveComponent, there is just 1 game currently and a PigComponent represents it.
  - A GameServer is created for each game and is the source of truth for the game data. It pushes out updates via PubSub to the GameLive server to update the view.
</section>

